node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\t\000\000\000\t\000\000\000\003\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06243905425071716
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06243905425071716
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/max"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/mul"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights"
  input: "mcnn/large/conv_1_9x9/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases"
  input: "mcnn/large/conv_1_9x9/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/Conv2D"
  op: "Conv2D"
  input: "Placeholder"
  input: "mcnn/large/conv_1_9x9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/large/conv_1_9x9/Conv2D"
  input: "mcnn/large/conv_1_9x9/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/Relu"
  op: "Relu"
  input: "mcnn/large/conv_1_9x9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/Maximum"
  op: "Maximum"
  input: "mcnn/large/conv_1_9x9/Relu"
  input: "mcnn/large/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\020\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05050762742757797
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05050762742757797
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/max"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/mul"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights"
  input: "mcnn/large/conv2_9x9/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases"
  input: "mcnn/large/conv2_9x9/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/Conv2D"
  op: "Conv2D"
  input: "mcnn/large/Maximum"
  input: "mcnn/large/conv2_9x9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/large/conv2_9x9/Conv2D"
  input: "mcnn/large/conv2_9x9/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/Relu"
  op: "Relu"
  input: "mcnn/large/conv2_9x9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/Maximum_1"
  op: "Maximum"
  input: "mcnn/large/conv2_9x9/Relu"
  input: "mcnn/large/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/pool1_9x9/MaxPool"
  op: "MaxPool"
  input: "mcnn/large/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05050762742757797
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05050762742757797
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/max"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/mul"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights"
  input: "mcnn/large/conv3_9x9/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases"
  input: "mcnn/large/conv3_9x9/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/Conv2D"
  op: "Conv2D"
  input: "mcnn/large/pool1_9x9/MaxPool"
  input: "mcnn/large/conv3_9x9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/large/conv3_9x9/Conv2D"
  input: "mcnn/large/conv3_9x9/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/Relu"
  op: "Relu"
  input: "mcnn/large/conv3_9x9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/Maximum_2"
  op: "Maximum"
  input: "mcnn/large/conv3_9x9/Relu"
  input: "mcnn/large/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/pool2_9x9/MaxPool"
  op: "MaxPool"
  input: "mcnn/large/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0714285746216774
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0714285746216774
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/max"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/mul"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights"
  input: "mcnn/large/conv4_9x9/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases"
  input: "mcnn/large/conv4_9x9/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/Conv2D"
  op: "Conv2D"
  input: "mcnn/large/pool2_9x9/MaxPool"
  input: "mcnn/large/conv4_9x9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/large/conv4_9x9/Conv2D"
  input: "mcnn/large/conv4_9x9/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/Relu"
  op: "Relu"
  input: "mcnn/large/conv4_9x9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/large/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/Maximum_3"
  op: "Maximum"
  input: "mcnn/large/conv4_9x9/Relu"
  input: "mcnn/large/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\003\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07296484708786011
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07296484708786011
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/max"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/mul"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights"
  input: "mcnn/medium/conv1_7x7/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases"
  input: "mcnn/medium/conv1_7x7/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/Conv2D"
  op: "Conv2D"
  input: "Placeholder"
  input: "mcnn/medium/conv1_7x7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/medium/conv1_7x7/Conv2D"
  input: "mcnn/medium/conv1_7x7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/Relu"
  op: "Relu"
  input: "mcnn/medium/conv1_7x7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/Maximum"
  op: "Maximum"
  input: "mcnn/medium/conv1_7x7/Relu"
  input: "mcnn/medium/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06324554979801178
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06324554979801178
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/max"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/mul"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights"
  input: "mcnn/medium/conv2_7x7/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases"
  input: "mcnn/medium/conv2_7x7/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/Conv2D"
  op: "Conv2D"
  input: "mcnn/medium/Maximum"
  input: "mcnn/medium/conv2_7x7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/medium/conv2_7x7/Conv2D"
  input: "mcnn/medium/conv2_7x7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/Relu"
  op: "Relu"
  input: "mcnn/medium/conv2_7x7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/Maximum_1"
  op: "Maximum"
  input: "mcnn/medium/conv2_7x7/Relu"
  input: "mcnn/medium/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/pool1_7x7/MaxPool"
  op: "MaxPool"
  input: "mcnn/medium/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000(\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06324554979801178
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06324554979801178
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/max"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/mul"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 40
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights"
  input: "mcnn/medium/conv3_7x7/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases"
  input: "mcnn/medium/conv3_7x7/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/Conv2D"
  op: "Conv2D"
  input: "mcnn/medium/pool1_7x7/MaxPool"
  input: "mcnn/medium/conv3_7x7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/medium/conv3_7x7/Conv2D"
  input: "mcnn/medium/conv3_7x7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/Relu"
  op: "Relu"
  input: "mcnn/medium/conv3_7x7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/Maximum_2"
  op: "Maximum"
  input: "mcnn/medium/conv3_7x7/Relu"
  input: "mcnn/medium/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/pool2_7x7/MaxPool"
  op: "MaxPool"
  input: "mcnn/medium/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08944272249937057
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08944272249937057
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/max"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/mul"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights"
  input: "mcnn/medium/conv4_7x7/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases"
  input: "mcnn/medium/conv4_7x7/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/Conv2D"
  op: "Conv2D"
  input: "mcnn/medium/pool2_7x7/MaxPool"
  input: "mcnn/medium/conv4_7x7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/medium/conv4_7x7/Conv2D"
  input: "mcnn/medium/conv4_7x7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/Relu"
  op: "Relu"
  input: "mcnn/medium/conv4_7x7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/medium/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/Maximum_3"
  op: "Maximum"
  input: "mcnn/medium/conv4_7x7/Relu"
  input: "mcnn/medium/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.094280906021595
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.094280906021595
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/max"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/mul"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights"
  input: "mcnn/small/conv1_5x5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases"
  input: "mcnn/small/conv1_5x5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/Conv2D"
  op: "Conv2D"
  input: "Placeholder"
  input: "mcnn/small/conv1_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/small/conv1_5x5/Conv2D"
  input: "mcnn/small/conv1_5x5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/Relu"
  op: "Relu"
  input: "mcnn/small/conv1_5x5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/Maximum"
  op: "Maximum"
  input: "mcnn/small/conv1_5x5/Relu"
  input: "mcnn/small/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\030\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09622504562139511
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09622504562139511
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/max"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/mul"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights"
  input: "mcnn/small/conv2_5x5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases"
  input: "mcnn/small/conv2_5x5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/Conv2D"
  op: "Conv2D"
  input: "mcnn/small/Maximum"
  input: "mcnn/small/conv2_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/small/conv2_5x5/Conv2D"
  input: "mcnn/small/conv2_5x5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/Relu"
  op: "Relu"
  input: "mcnn/small/conv2_5x5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/Maximum_1"
  op: "Maximum"
  input: "mcnn/small/conv2_5x5/Relu"
  input: "mcnn/small/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/pool1_5x5/MaxPool"
  op: "MaxPool"
  input: "mcnn/small/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\0000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09622504562139511
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09622504562139511
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/max"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/mul"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights"
  input: "mcnn/small/conv3_5x5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases"
  input: "mcnn/small/conv3_5x5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/Conv2D"
  op: "Conv2D"
  input: "mcnn/small/pool1_5x5/MaxPool"
  input: "mcnn/small/conv3_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/small/conv3_5x5/Conv2D"
  input: "mcnn/small/conv3_5x5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/Relu"
  op: "Relu"
  input: "mcnn/small/conv3_5x5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/Maximum_2"
  op: "Maximum"
  input: "mcnn/small/conv3_5x5/Relu"
  input: "mcnn/small/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/pool2_5x5/MaxPool"
  op: "MaxPool"
  input: "mcnn/small/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\030\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.13608276844024658
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.13608276844024658
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/max"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/mul"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights"
  input: "mcnn/small/conv4_5x5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases"
  input: "mcnn/small/conv4_5x5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/Conv2D"
  op: "Conv2D"
  input: "mcnn/small/pool2_5x5/MaxPool"
  input: "mcnn/small/conv4_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/small/conv4_5x5/Conv2D"
  input: "mcnn/small/conv4_5x5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/Relu"
  op: "Relu"
  input: "mcnn/small/conv4_5x5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/small/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/Maximum_3"
  op: "Maximum"
  input: "mcnn/small/conv4_5x5/Relu"
  input: "mcnn/small/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mcnn/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mcnn/concat"
  op: "ConcatV2"
  input: "mcnn/large/Maximum_3"
  input: "mcnn/medium/Maximum_3"
  input: "mcnn/small/Maximum_3"
  input: "mcnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\036\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4399413466453552
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4399413466453552
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/max"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/mul"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights"
  input: "mcnn/dmp_conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases"
  input: "mcnn/dmp_conv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/Conv2D"
  op: "Conv2D"
  input: "mcnn/concat"
  input: "mcnn/dmp_conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/BiasAdd"
  op: "BiasAdd"
  input: "mcnn/dmp_conv1/Conv2D"
  input: "mcnn/dmp_conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mcnn/dmp_conv1/Relu"
  op: "Relu"
  input: "mcnn/dmp_conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sub"
  op: "Sub"
  input: "mcnn/dmp_conv1/Relu"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "Square"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_grad/Shape"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/mul"
  op: "Mul"
  input: "gradients/Fill"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Sum"
  op: "Sum"
  input: "gradients/mul_grad/mul"
  input: "gradients/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/Sum"
  input: "gradients/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/mul_1"
  op: "Mul"
  input: "mul/x"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_grad/mul_1"
  input: "gradients/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_grad/Sum_1"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/Reshape"
  input: "^gradients/mul_grad/Reshape_1"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/Reshape"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/Reshape_1"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "gradients/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape"
  op: "Shape"
  input: "Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/Sum_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/Square_grad/mul"
  op: "Mul"
  input: "gradients/Square_grad/mul/x"
  input: "Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/Sum_grad/Tile"
  input: "gradients/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Sub_grad/Shape"
  op: "Shape"
  input: "mcnn/dmp_conv1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_grad/Shape_1"
  op: "Shape"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Sub_grad/Shape"
  input: "gradients/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/Square_grad/mul_1"
  input: "gradients/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/Sub_grad/Sum"
  input: "gradients/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/Square_grad/mul_1"
  input: "gradients/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Sub_grad/Neg"
  input: "gradients/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Sub_grad/Reshape"
  input: "^gradients/Sub_grad/Reshape_1"
}
node {
  name: "gradients/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Sub_grad/Reshape"
  input: "^gradients/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Sub_grad/Reshape_1"
  input: "^gradients/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Sub_grad/tuple/control_dependency"
  input: "mcnn/dmp_conv1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/dmp_conv1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/dmp_conv1/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/dmp_conv1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/dmp_conv1/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/dmp_conv1/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/dmp_conv1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/dmp_conv1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/concat"
  input: "mcnn/dmp_conv1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/ShapeN"
  input: "mcnn/dmp_conv1/weights/read"
  input: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/concat"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/dmp_conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/mod"
  op: "FloorMod"
  input: "mcnn/concat/axis"
  input: "gradients/mcnn/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/Shape"
  op: "Shape"
  input: "mcnn/large/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/large/Maximum_3"
  input: "mcnn/medium/Maximum_3"
  input: "mcnn/small/Maximum_3"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/mcnn/concat_grad/mod"
  input: "gradients/mcnn/concat_grad/ShapeN"
  input: "gradients/mcnn/concat_grad/ShapeN:1"
  input: "gradients/mcnn/concat_grad/ShapeN:2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/Slice"
  op: "Slice"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/concat_grad/ConcatOffset"
  input: "gradients/mcnn/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/concat_grad/ConcatOffset:1"
  input: "gradients/mcnn/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/Slice_2"
  op: "Slice"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/concat_grad/ConcatOffset:2"
  input: "gradients/mcnn/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/concat_grad/Slice"
  input: "^gradients/mcnn/concat_grad/Slice_1"
  input: "^gradients/mcnn/concat_grad/Slice_2"
}
node {
  name: "gradients/mcnn/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/concat_grad/Slice"
  input: "^gradients/mcnn/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/concat_grad/Slice_1"
  input: "^gradients/mcnn/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/concat_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/mcnn/concat_grad/Slice_2"
  input: "^gradients/mcnn/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/concat_grad/Slice_2"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Shape"
  op: "Shape"
  input: "mcnn/large/conv4_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/large/Maximum_3_grad/Shape_2"
  input: "gradients/mcnn/large/Maximum_3_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/large/conv4_9x9/Relu"
  input: "mcnn/large/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/large/Maximum_3_grad/Shape"
  input: "gradients/mcnn/large/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Select"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency"
  input: "gradients/mcnn/large/Maximum_3_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/large/Maximum_3_grad/zeros"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_3_grad/Select"
  input: "gradients/mcnn/large/Maximum_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_3_grad/Sum"
  input: "gradients/mcnn/large/Maximum_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_3_grad/Select_1"
  input: "gradients/mcnn/large/Maximum_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_3_grad/Sum_1"
  input: "gradients/mcnn/large/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_3_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_3_grad/Reshape_1"
  input: "^gradients/mcnn/large/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Shape"
  op: "Shape"
  input: "mcnn/medium/conv4_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/medium/Maximum_3_grad/Shape_2"
  input: "gradients/mcnn/medium/Maximum_3_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/medium/conv4_7x7/Relu"
  input: "mcnn/medium/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/medium/Maximum_3_grad/Shape"
  input: "gradients/mcnn/medium/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Select"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_1"
  input: "gradients/mcnn/medium/Maximum_3_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/medium/Maximum_3_grad/zeros"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_3_grad/Select"
  input: "gradients/mcnn/medium/Maximum_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_3_grad/Sum"
  input: "gradients/mcnn/medium/Maximum_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_3_grad/Select_1"
  input: "gradients/mcnn/medium/Maximum_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_3_grad/Sum_1"
  input: "gradients/mcnn/medium/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_3_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_3_grad/Reshape_1"
  input: "^gradients/mcnn/medium/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Shape"
  op: "Shape"
  input: "mcnn/small/conv4_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/small/Maximum_3_grad/Shape_2"
  input: "gradients/mcnn/small/Maximum_3_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/small/conv4_5x5/Relu"
  input: "mcnn/small/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/small/Maximum_3_grad/Shape"
  input: "gradients/mcnn/small/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Select"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_2"
  input: "gradients/mcnn/small/Maximum_3_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_3_grad/GreaterEqual"
  input: "gradients/mcnn/small/Maximum_3_grad/zeros"
  input: "gradients/mcnn/concat_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_3_grad/Select"
  input: "gradients/mcnn/small/Maximum_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_3_grad/Sum"
  input: "gradients/mcnn/small/Maximum_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_3_grad/Select_1"
  input: "gradients/mcnn/small/Maximum_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_3_grad/Sum_1"
  input: "gradients/mcnn/small/Maximum_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_3_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_3_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_3_grad/Reshape_1"
  input: "^gradients/mcnn/small/Maximum_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/large/Maximum_3_grad/tuple/control_dependency"
  input: "mcnn/large/conv4_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/medium/Maximum_3_grad/tuple/control_dependency"
  input: "mcnn/medium/conv4_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/small/Maximum_3_grad/tuple/control_dependency"
  input: "mcnn/small/conv4_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/large/conv4_9x9/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv4_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv4_9x9/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv4_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv4_9x9/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv4_9x9/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/medium/conv4_7x7/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv4_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv4_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv4_7x7/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/small/conv4_5x5/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv4_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv4_5x5/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv4_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv4_5x5/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv4_5x5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/large/pool2_9x9/MaxPool"
  input: "mcnn/large/conv4_9x9/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/ShapeN"
  input: "mcnn/large/conv4_9x9/weights/read"
  input: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/large/pool2_9x9/MaxPool"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv4_9x9/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/medium/pool2_7x7/MaxPool"
  input: "mcnn/medium/conv4_7x7/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/ShapeN"
  input: "mcnn/medium/conv4_7x7/weights/read"
  input: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/medium/pool2_7x7/MaxPool"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv4_7x7/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/small/pool2_5x5/MaxPool"
  input: "mcnn/small/conv4_5x5/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/ShapeN"
  input: "mcnn/small/conv4_5x5/weights/read"
  input: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/small/pool2_5x5/MaxPool"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv4_5x5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/pool2_9x9/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/large/Maximum_2"
  input: "mcnn/large/pool2_9x9/MaxPool"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/pool2_7x7/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/medium/Maximum_2"
  input: "mcnn/medium/pool2_7x7/MaxPool"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/pool2_5x5/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/small/Maximum_2"
  input: "mcnn/small/pool2_5x5/MaxPool"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Shape"
  op: "Shape"
  input: "mcnn/large/conv3_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/large/pool2_9x9/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/large/Maximum_2_grad/Shape_2"
  input: "gradients/mcnn/large/Maximum_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/large/conv3_9x9/Relu"
  input: "mcnn/large/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/large/Maximum_2_grad/Shape"
  input: "gradients/mcnn/large/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Select"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/large/pool2_9x9/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/large/Maximum_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/large/Maximum_2_grad/zeros"
  input: "gradients/mcnn/large/pool2_9x9/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_2_grad/Select"
  input: "gradients/mcnn/large/Maximum_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_2_grad/Sum"
  input: "gradients/mcnn/large/Maximum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_2_grad/Select_1"
  input: "gradients/mcnn/large/Maximum_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_2_grad/Sum_1"
  input: "gradients/mcnn/large/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_2_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_2_grad/Reshape_1"
  input: "^gradients/mcnn/large/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Shape"
  op: "Shape"
  input: "mcnn/medium/conv3_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/medium/pool2_7x7/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/medium/Maximum_2_grad/Shape_2"
  input: "gradients/mcnn/medium/Maximum_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/medium/conv3_7x7/Relu"
  input: "mcnn/medium/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/medium/Maximum_2_grad/Shape"
  input: "gradients/mcnn/medium/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Select"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/medium/pool2_7x7/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/medium/Maximum_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/medium/Maximum_2_grad/zeros"
  input: "gradients/mcnn/medium/pool2_7x7/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_2_grad/Select"
  input: "gradients/mcnn/medium/Maximum_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_2_grad/Sum"
  input: "gradients/mcnn/medium/Maximum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_2_grad/Select_1"
  input: "gradients/mcnn/medium/Maximum_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_2_grad/Sum_1"
  input: "gradients/mcnn/medium/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_2_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_2_grad/Reshape_1"
  input: "^gradients/mcnn/medium/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Shape"
  op: "Shape"
  input: "mcnn/small/conv3_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/small/pool2_5x5/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/small/Maximum_2_grad/Shape_2"
  input: "gradients/mcnn/small/Maximum_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/small/conv3_5x5/Relu"
  input: "mcnn/small/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/small/Maximum_2_grad/Shape"
  input: "gradients/mcnn/small/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Select"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/small/pool2_5x5/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/small/Maximum_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_2_grad/GreaterEqual"
  input: "gradients/mcnn/small/Maximum_2_grad/zeros"
  input: "gradients/mcnn/small/pool2_5x5/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_2_grad/Select"
  input: "gradients/mcnn/small/Maximum_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_2_grad/Sum"
  input: "gradients/mcnn/small/Maximum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_2_grad/Select_1"
  input: "gradients/mcnn/small/Maximum_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_2_grad/Sum_1"
  input: "gradients/mcnn/small/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_2_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_2_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_2_grad/Reshape_1"
  input: "^gradients/mcnn/small/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/large/Maximum_2_grad/tuple/control_dependency"
  input: "mcnn/large/conv3_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/medium/Maximum_2_grad/tuple/control_dependency"
  input: "mcnn/medium/conv3_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/small/Maximum_2_grad/tuple/control_dependency"
  input: "mcnn/small/conv3_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/large/conv3_9x9/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv3_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv3_9x9/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv3_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv3_9x9/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv3_9x9/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/medium/conv3_7x7/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv3_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv3_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv3_7x7/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/small/conv3_5x5/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv3_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv3_5x5/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv3_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv3_5x5/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv3_5x5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/large/pool1_9x9/MaxPool"
  input: "mcnn/large/conv3_9x9/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/ShapeN"
  input: "mcnn/large/conv3_9x9/weights/read"
  input: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/large/pool1_9x9/MaxPool"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv3_9x9/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/medium/pool1_7x7/MaxPool"
  input: "mcnn/medium/conv3_7x7/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/ShapeN"
  input: "mcnn/medium/conv3_7x7/weights/read"
  input: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/medium/pool1_7x7/MaxPool"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv3_7x7/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/small/pool1_5x5/MaxPool"
  input: "mcnn/small/conv3_5x5/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/ShapeN"
  input: "mcnn/small/conv3_5x5/weights/read"
  input: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/small/pool1_5x5/MaxPool"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv3_5x5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/pool1_9x9/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/large/Maximum_1"
  input: "mcnn/large/pool1_9x9/MaxPool"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/pool1_7x7/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/medium/Maximum_1"
  input: "mcnn/medium/pool1_7x7/MaxPool"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/pool1_5x5/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "mcnn/small/Maximum_1"
  input: "mcnn/small/pool1_5x5/MaxPool"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Shape"
  op: "Shape"
  input: "mcnn/large/conv2_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/large/pool1_9x9/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/large/Maximum_1_grad/Shape_2"
  input: "gradients/mcnn/large/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/large/conv2_9x9/Relu"
  input: "mcnn/large/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/large/Maximum_1_grad/Shape"
  input: "gradients/mcnn/large/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/large/pool1_9x9/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/large/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/large/Maximum_1_grad/zeros"
  input: "gradients/mcnn/large/pool1_9x9/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_1_grad/Select"
  input: "gradients/mcnn/large/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_1_grad/Sum"
  input: "gradients/mcnn/large/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_1_grad/Select_1"
  input: "gradients/mcnn/large/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_1_grad/Sum_1"
  input: "gradients/mcnn/large/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_1_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_1_grad/Reshape_1"
  input: "^gradients/mcnn/large/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Shape"
  op: "Shape"
  input: "mcnn/medium/conv2_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/medium/pool1_7x7/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/medium/Maximum_1_grad/Shape_2"
  input: "gradients/mcnn/medium/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/medium/conv2_7x7/Relu"
  input: "mcnn/medium/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/medium/Maximum_1_grad/Shape"
  input: "gradients/mcnn/medium/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/medium/pool1_7x7/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/medium/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/medium/Maximum_1_grad/zeros"
  input: "gradients/mcnn/medium/pool1_7x7/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_1_grad/Select"
  input: "gradients/mcnn/medium/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_1_grad/Sum"
  input: "gradients/mcnn/medium/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_1_grad/Select_1"
  input: "gradients/mcnn/medium/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_1_grad/Sum_1"
  input: "gradients/mcnn/medium/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_1_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_1_grad/Reshape_1"
  input: "^gradients/mcnn/medium/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Shape"
  op: "Shape"
  input: "mcnn/small/conv2_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/small/pool1_5x5/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/small/Maximum_1_grad/Shape_2"
  input: "gradients/mcnn/small/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/small/conv2_5x5/Relu"
  input: "mcnn/small/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/small/Maximum_1_grad/Shape"
  input: "gradients/mcnn/small/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/small/pool1_5x5/MaxPool_grad/MaxPoolGrad"
  input: "gradients/mcnn/small/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_1_grad/GreaterEqual"
  input: "gradients/mcnn/small/Maximum_1_grad/zeros"
  input: "gradients/mcnn/small/pool1_5x5/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_1_grad/Select"
  input: "gradients/mcnn/small/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_1_grad/Sum"
  input: "gradients/mcnn/small/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_1_grad/Select_1"
  input: "gradients/mcnn/small/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_1_grad/Sum_1"
  input: "gradients/mcnn/small/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_1_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_1_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_1_grad/Reshape_1"
  input: "^gradients/mcnn/small/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/large/Maximum_1_grad/tuple/control_dependency"
  input: "mcnn/large/conv2_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/medium/Maximum_1_grad/tuple/control_dependency"
  input: "mcnn/medium/conv2_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/small/Maximum_1_grad/tuple/control_dependency"
  input: "mcnn/small/conv2_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/large/conv2_9x9/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv2_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv2_9x9/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv2_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv2_9x9/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv2_9x9/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/medium/conv2_7x7/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv2_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv2_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv2_7x7/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/small/conv2_5x5/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv2_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv2_5x5/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv2_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv2_5x5/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv2_5x5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/large/Maximum"
  input: "mcnn/large/conv2_9x9/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/ShapeN"
  input: "mcnn/large/conv2_9x9/weights/read"
  input: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/large/Maximum"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv2_9x9/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/medium/Maximum"
  input: "mcnn/medium/conv2_7x7/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/ShapeN"
  input: "mcnn/medium/conv2_7x7/weights/read"
  input: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/medium/Maximum"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv2_7x7/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "mcnn/small/Maximum"
  input: "mcnn/small/conv2_5x5/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/ShapeN"
  input: "mcnn/small/conv2_5x5/weights/read"
  input: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "mcnn/small/Maximum"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv2_5x5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Shape"
  op: "Shape"
  input: "mcnn/large/conv_1_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/large/Maximum_grad/Shape_2"
  input: "gradients/mcnn/large/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/large/conv_1_9x9/Relu"
  input: "mcnn/large/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/large/Maximum_grad/Shape"
  input: "gradients/mcnn/large/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Select"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/large/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/large/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/large/Maximum_grad/zeros"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_grad/Select"
  input: "gradients/mcnn/large/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_grad/Sum"
  input: "gradients/mcnn/large/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/large/Maximum_grad/Select_1"
  input: "gradients/mcnn/large/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/large/Maximum_grad/Sum_1"
  input: "gradients/mcnn/large/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/Maximum_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/large/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_grad/Reshape"
  input: "^gradients/mcnn/large/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/Maximum_grad/Reshape_1"
  input: "^gradients/mcnn/large/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Shape"
  op: "Shape"
  input: "mcnn/medium/conv1_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/medium/Maximum_grad/Shape_2"
  input: "gradients/mcnn/medium/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/medium/conv1_7x7/Relu"
  input: "mcnn/medium/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/medium/Maximum_grad/Shape"
  input: "gradients/mcnn/medium/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Select"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/medium/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/medium/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/medium/Maximum_grad/zeros"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_grad/Select"
  input: "gradients/mcnn/medium/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_grad/Sum"
  input: "gradients/mcnn/medium/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/medium/Maximum_grad/Select_1"
  input: "gradients/mcnn/medium/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/medium/Maximum_grad/Sum_1"
  input: "gradients/mcnn/medium/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/Maximum_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_grad/Reshape"
  input: "^gradients/mcnn/medium/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/Maximum_grad/Reshape_1"
  input: "^gradients/mcnn/medium/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Shape"
  op: "Shape"
  input: "mcnn/small/conv1_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/mcnn/small/Maximum_grad/Shape_2"
  input: "gradients/mcnn/small/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "mcnn/small/conv1_5x5/Relu"
  input: "mcnn/small/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mcnn/small/Maximum_grad/Shape"
  input: "gradients/mcnn/small/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Select"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency"
  input: "gradients/mcnn/small/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/mcnn/small/Maximum_grad/GreaterEqual"
  input: "gradients/mcnn/small/Maximum_grad/zeros"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_grad/Select"
  input: "gradients/mcnn/small/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_grad/Sum"
  input: "gradients/mcnn/small/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/mcnn/small/Maximum_grad/Select_1"
  input: "gradients/mcnn/small/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mcnn/small/Maximum_grad/Sum_1"
  input: "gradients/mcnn/small/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/Maximum_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/mcnn/small/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_grad/Reshape"
  input: "^gradients/mcnn/small/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/Maximum_grad/Reshape_1"
  input: "^gradients/mcnn/small/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/large/Maximum_grad/tuple/control_dependency"
  input: "mcnn/large/conv_1_9x9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/medium/Maximum_grad/tuple/control_dependency"
  input: "mcnn/medium/conv1_7x7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mcnn/small/Maximum_grad/tuple/control_dependency"
  input: "mcnn/small/conv1_5x5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/large/conv_1_9x9/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv_1_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv_1_9x9/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv_1_9x9/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/medium/conv1_7x7/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv1_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv1_7x7/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv1_7x7/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mcnn/small/conv1_5x5/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv1_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv1_5x5/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv1_5x5/Relu_grad/ReluGrad"
  input: "^gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv1_5x5/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv1_5x5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Placeholder"
  input: "mcnn/large/conv_1_9x9/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/ShapeN"
  input: "mcnn/large/conv_1_9x9/weights/read"
  input: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Placeholder"
  input: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/large/conv_1_9x9/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Placeholder"
  input: "mcnn/medium/conv1_7x7/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/ShapeN"
  input: "mcnn/medium/conv1_7x7/weights/read"
  input: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Placeholder"
  input: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/medium/conv1_7x7/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Placeholder"
  input: "mcnn/small/conv1_5x5/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/ShapeN"
  input: "mcnn/small/conv1_5x5/weights/read"
  input: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Placeholder"
  input: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/ShapeN:1"
  input: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mcnn/small/conv1_5x5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights/Adam"
  input: "mcnn/large/conv_1_9x9/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases/Adam"
  input: "mcnn/large/conv_1_9x9/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv_1_9x9/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 16
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights/Adam"
  input: "mcnn/large/conv2_9x9/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 16
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights/Adam_1"
  input: "mcnn/large/conv2_9x9/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases/Adam"
  input: "mcnn/large/conv2_9x9/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases/Adam_1"
  input: "mcnn/large/conv2_9x9/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv2_9x9/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv2_9x9/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights/Adam"
  input: "mcnn/large/conv3_9x9/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights/Adam_1"
  input: "mcnn/large/conv3_9x9/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases/Adam"
  input: "mcnn/large/conv3_9x9/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases/Adam_1"
  input: "mcnn/large/conv3_9x9/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv3_9x9/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv3_9x9/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights/Adam"
  input: "mcnn/large/conv4_9x9/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights/Adam_1"
  input: "mcnn/large/conv4_9x9/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases/Adam"
  input: "mcnn/large/conv4_9x9/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases/Adam_1"
  input: "mcnn/large/conv4_9x9/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/large/conv4_9x9/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/large/conv4_9x9/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 3
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights/Adam"
  input: "mcnn/medium/conv1_7x7/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 3
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases/Adam"
  input: "mcnn/medium/conv1_7x7/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv1_7x7/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights/Adam"
  input: "mcnn/medium/conv2_7x7/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases/Adam"
  input: "mcnn/medium/conv2_7x7/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv2_7x7/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 40
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 40
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights/Adam"
  input: "mcnn/medium/conv3_7x7/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 40
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 40
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases/Adam"
  input: "mcnn/medium/conv3_7x7/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv3_7x7/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights/Adam"
  input: "mcnn/medium/conv4_7x7/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases/Adam"
  input: "mcnn/medium/conv4_7x7/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/medium/conv4_7x7/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights/Adam"
  input: "mcnn/small/conv1_5x5/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights/Adam_1"
  input: "mcnn/small/conv1_5x5/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases/Adam"
  input: "mcnn/small/conv1_5x5/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases/Adam_1"
  input: "mcnn/small/conv1_5x5/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv1_5x5/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv1_5x5/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights/Adam"
  input: "mcnn/small/conv2_5x5/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights/Adam_1"
  input: "mcnn/small/conv2_5x5/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases/Adam"
  input: "mcnn/small/conv2_5x5/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases/Adam_1"
  input: "mcnn/small/conv2_5x5/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv2_5x5/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv2_5x5/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 48
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights/Adam"
  input: "mcnn/small/conv3_5x5/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 48
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights/Adam_1"
  input: "mcnn/small/conv3_5x5/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases/Adam"
  input: "mcnn/small/conv3_5x5/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases/Adam_1"
  input: "mcnn/small/conv3_5x5/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv3_5x5/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv3_5x5/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights/Adam"
  input: "mcnn/small/conv4_5x5/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 24
          }
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights/Adam_1"
  input: "mcnn/small/conv4_5x5/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases/Adam"
  input: "mcnn/small/conv4_5x5/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases/Adam_1"
  input: "mcnn/small/conv4_5x5/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/small/conv4_5x5/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/small/conv4_5x5/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights/Adam"
  input: "mcnn/dmp_conv1/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights/Adam_1"
  input: "mcnn/dmp_conv1/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/weights/Adam_1/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases/Adam"
  input: "mcnn/dmp_conv1/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam_1/Assign"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases/Adam_1"
  input: "mcnn/dmp_conv1/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mcnn/dmp_conv1/biases/Adam_1/read"
  op: "Identity"
  input: "mcnn/dmp_conv1/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv_1_9x9/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv_1_9x9/weights"
  input: "mcnn/large/conv_1_9x9/weights/Adam"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv_1_9x9/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv_1_9x9/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv_1_9x9/biases"
  input: "mcnn/large/conv_1_9x9/biases/Adam"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv_1_9x9/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv2_9x9/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv2_9x9/weights"
  input: "mcnn/large/conv2_9x9/weights/Adam"
  input: "mcnn/large/conv2_9x9/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv2_9x9/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv2_9x9/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv2_9x9/biases"
  input: "mcnn/large/conv2_9x9/biases/Adam"
  input: "mcnn/large/conv2_9x9/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv2_9x9/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv3_9x9/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv3_9x9/weights"
  input: "mcnn/large/conv3_9x9/weights/Adam"
  input: "mcnn/large/conv3_9x9/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv3_9x9/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv3_9x9/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv3_9x9/biases"
  input: "mcnn/large/conv3_9x9/biases/Adam"
  input: "mcnn/large/conv3_9x9/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv3_9x9/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv4_9x9/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv4_9x9/weights"
  input: "mcnn/large/conv4_9x9/weights/Adam"
  input: "mcnn/large/conv4_9x9/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv4_9x9/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/large/conv4_9x9/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/large/conv4_9x9/biases"
  input: "mcnn/large/conv4_9x9/biases/Adam"
  input: "mcnn/large/conv4_9x9/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/large/conv4_9x9/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv1_7x7/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv1_7x7/weights"
  input: "mcnn/medium/conv1_7x7/weights/Adam"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv1_7x7/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv1_7x7/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv1_7x7/biases"
  input: "mcnn/medium/conv1_7x7/biases/Adam"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv1_7x7/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv2_7x7/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv2_7x7/weights"
  input: "mcnn/medium/conv2_7x7/weights/Adam"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv2_7x7/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv2_7x7/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv2_7x7/biases"
  input: "mcnn/medium/conv2_7x7/biases/Adam"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv2_7x7/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv3_7x7/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv3_7x7/weights"
  input: "mcnn/medium/conv3_7x7/weights/Adam"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv3_7x7/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv3_7x7/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv3_7x7/biases"
  input: "mcnn/medium/conv3_7x7/biases/Adam"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv3_7x7/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv4_7x7/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv4_7x7/weights"
  input: "mcnn/medium/conv4_7x7/weights/Adam"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv4_7x7/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/medium/conv4_7x7/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/medium/conv4_7x7/biases"
  input: "mcnn/medium/conv4_7x7/biases/Adam"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/medium/conv4_7x7/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv1_5x5/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv1_5x5/weights"
  input: "mcnn/small/conv1_5x5/weights/Adam"
  input: "mcnn/small/conv1_5x5/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv1_5x5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv1_5x5/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv1_5x5/biases"
  input: "mcnn/small/conv1_5x5/biases/Adam"
  input: "mcnn/small/conv1_5x5/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv1_5x5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv2_5x5/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv2_5x5/weights"
  input: "mcnn/small/conv2_5x5/weights/Adam"
  input: "mcnn/small/conv2_5x5/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv2_5x5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv2_5x5/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv2_5x5/biases"
  input: "mcnn/small/conv2_5x5/biases/Adam"
  input: "mcnn/small/conv2_5x5/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv2_5x5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv3_5x5/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv3_5x5/weights"
  input: "mcnn/small/conv3_5x5/weights/Adam"
  input: "mcnn/small/conv3_5x5/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv3_5x5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv3_5x5/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv3_5x5/biases"
  input: "mcnn/small/conv3_5x5/biases/Adam"
  input: "mcnn/small/conv3_5x5/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv3_5x5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv4_5x5/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv4_5x5/weights"
  input: "mcnn/small/conv4_5x5/weights/Adam"
  input: "mcnn/small/conv4_5x5/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv4_5x5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/small/conv4_5x5/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/small/conv4_5x5/biases"
  input: "mcnn/small/conv4_5x5/biases/Adam"
  input: "mcnn/small/conv4_5x5/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/small/conv4_5x5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/dmp_conv1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/dmp_conv1/weights"
  input: "mcnn/dmp_conv1/weights/Adam"
  input: "mcnn/dmp_conv1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/dmp_conv1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mcnn/dmp_conv1/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "mcnn/dmp_conv1/biases"
  input: "mcnn/dmp_conv1/biases/Adam"
  input: "mcnn/dmp_conv1/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/mcnn/dmp_conv1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_mcnn/large/conv_1_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv_1_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/weights/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_mcnn/large/conv_1_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv_1_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/weights/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/update_mcnn/large/conv_1_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv_1_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv2_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv3_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/weights/ApplyAdam"
  input: "^Adam/update_mcnn/large/conv4_9x9/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv1_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv2_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv3_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/weights/ApplyAdam"
  input: "^Adam/update_mcnn/medium/conv4_7x7/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv1_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv2_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv3_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/weights/ApplyAdam"
  input: "^Adam/update_mcnn/small/conv4_5x5/biases/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/weights/ApplyAdam"
  input: "^Adam/update_mcnn/dmp_conv1/biases/ApplyAdam"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
}
node {
  name: "MSE/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSE"
      }
    }
  }
}
node {
  name: "MSE"
  op: "ScalarSummary"
  input: "MSE/tags"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "MSE"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "mcnn/dmp_conv1/biases"
        string_val: "mcnn/dmp_conv1/biases/Adam"
        string_val: "mcnn/dmp_conv1/biases/Adam_1"
        string_val: "mcnn/dmp_conv1/weights"
        string_val: "mcnn/dmp_conv1/weights/Adam"
        string_val: "mcnn/dmp_conv1/weights/Adam_1"
        string_val: "mcnn/large/conv2_9x9/biases"
        string_val: "mcnn/large/conv2_9x9/biases/Adam"
        string_val: "mcnn/large/conv2_9x9/biases/Adam_1"
        string_val: "mcnn/large/conv2_9x9/weights"
        string_val: "mcnn/large/conv2_9x9/weights/Adam"
        string_val: "mcnn/large/conv2_9x9/weights/Adam_1"
        string_val: "mcnn/large/conv3_9x9/biases"
        string_val: "mcnn/large/conv3_9x9/biases/Adam"
        string_val: "mcnn/large/conv3_9x9/biases/Adam_1"
        string_val: "mcnn/large/conv3_9x9/weights"
        string_val: "mcnn/large/conv3_9x9/weights/Adam"
        string_val: "mcnn/large/conv3_9x9/weights/Adam_1"
        string_val: "mcnn/large/conv4_9x9/biases"
        string_val: "mcnn/large/conv4_9x9/biases/Adam"
        string_val: "mcnn/large/conv4_9x9/biases/Adam_1"
        string_val: "mcnn/large/conv4_9x9/weights"
        string_val: "mcnn/large/conv4_9x9/weights/Adam"
        string_val: "mcnn/large/conv4_9x9/weights/Adam_1"
        string_val: "mcnn/large/conv_1_9x9/biases"
        string_val: "mcnn/large/conv_1_9x9/biases/Adam"
        string_val: "mcnn/large/conv_1_9x9/biases/Adam_1"
        string_val: "mcnn/large/conv_1_9x9/weights"
        string_val: "mcnn/large/conv_1_9x9/weights/Adam"
        string_val: "mcnn/large/conv_1_9x9/weights/Adam_1"
        string_val: "mcnn/medium/conv1_7x7/biases"
        string_val: "mcnn/medium/conv1_7x7/biases/Adam"
        string_val: "mcnn/medium/conv1_7x7/biases/Adam_1"
        string_val: "mcnn/medium/conv1_7x7/weights"
        string_val: "mcnn/medium/conv1_7x7/weights/Adam"
        string_val: "mcnn/medium/conv1_7x7/weights/Adam_1"
        string_val: "mcnn/medium/conv2_7x7/biases"
        string_val: "mcnn/medium/conv2_7x7/biases/Adam"
        string_val: "mcnn/medium/conv2_7x7/biases/Adam_1"
        string_val: "mcnn/medium/conv2_7x7/weights"
        string_val: "mcnn/medium/conv2_7x7/weights/Adam"
        string_val: "mcnn/medium/conv2_7x7/weights/Adam_1"
        string_val: "mcnn/medium/conv3_7x7/biases"
        string_val: "mcnn/medium/conv3_7x7/biases/Adam"
        string_val: "mcnn/medium/conv3_7x7/biases/Adam_1"
        string_val: "mcnn/medium/conv3_7x7/weights"
        string_val: "mcnn/medium/conv3_7x7/weights/Adam"
        string_val: "mcnn/medium/conv3_7x7/weights/Adam_1"
        string_val: "mcnn/medium/conv4_7x7/biases"
        string_val: "mcnn/medium/conv4_7x7/biases/Adam"
        string_val: "mcnn/medium/conv4_7x7/biases/Adam_1"
        string_val: "mcnn/medium/conv4_7x7/weights"
        string_val: "mcnn/medium/conv4_7x7/weights/Adam"
        string_val: "mcnn/medium/conv4_7x7/weights/Adam_1"
        string_val: "mcnn/small/conv1_5x5/biases"
        string_val: "mcnn/small/conv1_5x5/biases/Adam"
        string_val: "mcnn/small/conv1_5x5/biases/Adam_1"
        string_val: "mcnn/small/conv1_5x5/weights"
        string_val: "mcnn/small/conv1_5x5/weights/Adam"
        string_val: "mcnn/small/conv1_5x5/weights/Adam_1"
        string_val: "mcnn/small/conv2_5x5/biases"
        string_val: "mcnn/small/conv2_5x5/biases/Adam"
        string_val: "mcnn/small/conv2_5x5/biases/Adam_1"
        string_val: "mcnn/small/conv2_5x5/weights"
        string_val: "mcnn/small/conv2_5x5/weights/Adam"
        string_val: "mcnn/small/conv2_5x5/weights/Adam_1"
        string_val: "mcnn/small/conv3_5x5/biases"
        string_val: "mcnn/small/conv3_5x5/biases/Adam"
        string_val: "mcnn/small/conv3_5x5/biases/Adam_1"
        string_val: "mcnn/small/conv3_5x5/weights"
        string_val: "mcnn/small/conv3_5x5/weights/Adam"
        string_val: "mcnn/small/conv3_5x5/weights/Adam_1"
        string_val: "mcnn/small/conv4_5x5/biases"
        string_val: "mcnn/small/conv4_5x5/biases/Adam"
        string_val: "mcnn/small/conv4_5x5/biases/Adam_1"
        string_val: "mcnn/small/conv4_5x5/weights"
        string_val: "mcnn/small/conv4_5x5/weights/Adam"
        string_val: "mcnn/small/conv4_5x5/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "mcnn/dmp_conv1/biases"
  input: "mcnn/dmp_conv1/biases/Adam"
  input: "mcnn/dmp_conv1/biases/Adam_1"
  input: "mcnn/dmp_conv1/weights"
  input: "mcnn/dmp_conv1/weights/Adam"
  input: "mcnn/dmp_conv1/weights/Adam_1"
  input: "mcnn/large/conv2_9x9/biases"
  input: "mcnn/large/conv2_9x9/biases/Adam"
  input: "mcnn/large/conv2_9x9/biases/Adam_1"
  input: "mcnn/large/conv2_9x9/weights"
  input: "mcnn/large/conv2_9x9/weights/Adam"
  input: "mcnn/large/conv2_9x9/weights/Adam_1"
  input: "mcnn/large/conv3_9x9/biases"
  input: "mcnn/large/conv3_9x9/biases/Adam"
  input: "mcnn/large/conv3_9x9/biases/Adam_1"
  input: "mcnn/large/conv3_9x9/weights"
  input: "mcnn/large/conv3_9x9/weights/Adam"
  input: "mcnn/large/conv3_9x9/weights/Adam_1"
  input: "mcnn/large/conv4_9x9/biases"
  input: "mcnn/large/conv4_9x9/biases/Adam"
  input: "mcnn/large/conv4_9x9/biases/Adam_1"
  input: "mcnn/large/conv4_9x9/weights"
  input: "mcnn/large/conv4_9x9/weights/Adam"
  input: "mcnn/large/conv4_9x9/weights/Adam_1"
  input: "mcnn/large/conv_1_9x9/biases"
  input: "mcnn/large/conv_1_9x9/biases/Adam"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1"
  input: "mcnn/large/conv_1_9x9/weights"
  input: "mcnn/large/conv_1_9x9/weights/Adam"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1"
  input: "mcnn/medium/conv1_7x7/biases"
  input: "mcnn/medium/conv1_7x7/biases/Adam"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1"
  input: "mcnn/medium/conv1_7x7/weights"
  input: "mcnn/medium/conv1_7x7/weights/Adam"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1"
  input: "mcnn/medium/conv2_7x7/biases"
  input: "mcnn/medium/conv2_7x7/biases/Adam"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1"
  input: "mcnn/medium/conv2_7x7/weights"
  input: "mcnn/medium/conv2_7x7/weights/Adam"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1"
  input: "mcnn/medium/conv3_7x7/biases"
  input: "mcnn/medium/conv3_7x7/biases/Adam"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1"
  input: "mcnn/medium/conv3_7x7/weights"
  input: "mcnn/medium/conv3_7x7/weights/Adam"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1"
  input: "mcnn/medium/conv4_7x7/biases"
  input: "mcnn/medium/conv4_7x7/biases/Adam"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1"
  input: "mcnn/medium/conv4_7x7/weights"
  input: "mcnn/medium/conv4_7x7/weights/Adam"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1"
  input: "mcnn/small/conv1_5x5/biases"
  input: "mcnn/small/conv1_5x5/biases/Adam"
  input: "mcnn/small/conv1_5x5/biases/Adam_1"
  input: "mcnn/small/conv1_5x5/weights"
  input: "mcnn/small/conv1_5x5/weights/Adam"
  input: "mcnn/small/conv1_5x5/weights/Adam_1"
  input: "mcnn/small/conv2_5x5/biases"
  input: "mcnn/small/conv2_5x5/biases/Adam"
  input: "mcnn/small/conv2_5x5/biases/Adam_1"
  input: "mcnn/small/conv2_5x5/weights"
  input: "mcnn/small/conv2_5x5/weights/Adam"
  input: "mcnn/small/conv2_5x5/weights/Adam_1"
  input: "mcnn/small/conv3_5x5/biases"
  input: "mcnn/small/conv3_5x5/biases/Adam"
  input: "mcnn/small/conv3_5x5/biases/Adam_1"
  input: "mcnn/small/conv3_5x5/weights"
  input: "mcnn/small/conv3_5x5/weights/Adam"
  input: "mcnn/small/conv3_5x5/weights/Adam_1"
  input: "mcnn/small/conv4_5x5/biases"
  input: "mcnn/small/conv4_5x5/biases/Adam"
  input: "mcnn/small/conv4_5x5/biases/Adam_1"
  input: "mcnn/small/conv4_5x5/weights"
  input: "mcnn/small/conv4_5x5/weights/Adam"
  input: "mcnn/small/conv4_5x5/weights/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases/Adam"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "mcnn/dmp_conv1/biases/Adam_1"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights/Adam"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/dmp_conv1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "mcnn/dmp_conv1/weights/Adam_1"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/dmp_conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases/Adam"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/biases/Adam_1"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights/Adam"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv2_9x9/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "mcnn/large/conv2_9x9/weights/Adam_1"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv2_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases/Adam"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/biases/Adam_1"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights/Adam"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv3_9x9/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "mcnn/large/conv3_9x9/weights/Adam_1"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv3_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases/Adam"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/biases/Adam_1"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights/Adam"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv4_9x9/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "mcnn/large/conv4_9x9/weights/Adam_1"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv4_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases/Adam"
  input: "save/RestoreV2_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/biases/Adam_1"
  input: "save/RestoreV2_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights"
  input: "save/RestoreV2_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights/Adam"
  input: "save/RestoreV2_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/large/conv_1_9x9/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "mcnn/large/conv_1_9x9/weights/Adam_1"
  input: "save/RestoreV2_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/large/conv_1_9x9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases"
  input: "save/RestoreV2_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases/Adam"
  input: "save/RestoreV2_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/biases/Adam_1"
  input: "save/RestoreV2_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights"
  input: "save/RestoreV2_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights/Adam"
  input: "save/RestoreV2_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv1_7x7/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "mcnn/medium/conv1_7x7/weights/Adam_1"
  input: "save/RestoreV2_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv1_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases"
  input: "save/RestoreV2_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases/Adam"
  input: "save/RestoreV2_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/biases/Adam_1"
  input: "save/RestoreV2_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights"
  input: "save/RestoreV2_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights/Adam"
  input: "save/RestoreV2_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_43/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv2_7x7/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_43/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_43"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_43/tensor_names"
  input: "save/RestoreV2_43/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "mcnn/medium/conv2_7x7/weights/Adam_1"
  input: "save/RestoreV2_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv2_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_44/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_44/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_44"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_44/tensor_names"
  input: "save/RestoreV2_44/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases"
  input: "save/RestoreV2_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_45/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_45/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_45"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_45/tensor_names"
  input: "save/RestoreV2_45/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases/Adam"
  input: "save/RestoreV2_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_46/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_46/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_46"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_46/tensor_names"
  input: "save/RestoreV2_46/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/biases/Adam_1"
  input: "save/RestoreV2_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_47/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_47/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_47"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_47/tensor_names"
  input: "save/RestoreV2_47/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights"
  input: "save/RestoreV2_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_48/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_48/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_48"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_48/tensor_names"
  input: "save/RestoreV2_48/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights/Adam"
  input: "save/RestoreV2_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_49/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv3_7x7/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_49/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_49"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_49/tensor_names"
  input: "save/RestoreV2_49/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "mcnn/medium/conv3_7x7/weights/Adam_1"
  input: "save/RestoreV2_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv3_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_50/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_50/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_50"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_50/tensor_names"
  input: "save/RestoreV2_50/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases"
  input: "save/RestoreV2_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_51/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_51/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_51"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_51/tensor_names"
  input: "save/RestoreV2_51/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases/Adam"
  input: "save/RestoreV2_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_52/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_52/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_52"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_52/tensor_names"
  input: "save/RestoreV2_52/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/biases/Adam_1"
  input: "save/RestoreV2_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_53/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_53/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_53"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_53/tensor_names"
  input: "save/RestoreV2_53/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights"
  input: "save/RestoreV2_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_54/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_54/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_54"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_54/tensor_names"
  input: "save/RestoreV2_54/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights/Adam"
  input: "save/RestoreV2_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_55/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/medium/conv4_7x7/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_55/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_55"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_55/tensor_names"
  input: "save/RestoreV2_55/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "mcnn/medium/conv4_7x7/weights/Adam_1"
  input: "save/RestoreV2_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/medium/conv4_7x7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_56/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_56/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_56"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_56/tensor_names"
  input: "save/RestoreV2_56/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases"
  input: "save/RestoreV2_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_57/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_57/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_57"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_57/tensor_names"
  input: "save/RestoreV2_57/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases/Adam"
  input: "save/RestoreV2_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_58/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_58/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_58"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_58/tensor_names"
  input: "save/RestoreV2_58/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/biases/Adam_1"
  input: "save/RestoreV2_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_59/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_59/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_59"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_59/tensor_names"
  input: "save/RestoreV2_59/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights"
  input: "save/RestoreV2_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_60/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_60/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_60"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_60/tensor_names"
  input: "save/RestoreV2_60/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights/Adam"
  input: "save/RestoreV2_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_61/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv1_5x5/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_61/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_61"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_61/tensor_names"
  input: "save/RestoreV2_61/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "mcnn/small/conv1_5x5/weights/Adam_1"
  input: "save/RestoreV2_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv1_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_62/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_62/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_62"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_62/tensor_names"
  input: "save/RestoreV2_62/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases"
  input: "save/RestoreV2_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_63/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_63/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_63"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_63/tensor_names"
  input: "save/RestoreV2_63/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases/Adam"
  input: "save/RestoreV2_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_64/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_64/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_64"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_64/tensor_names"
  input: "save/RestoreV2_64/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/biases/Adam_1"
  input: "save/RestoreV2_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_65/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_65/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_65"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_65/tensor_names"
  input: "save/RestoreV2_65/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights"
  input: "save/RestoreV2_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_66/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_66/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_66"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_66/tensor_names"
  input: "save/RestoreV2_66/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights/Adam"
  input: "save/RestoreV2_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_67/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv2_5x5/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_67/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_67"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_67/tensor_names"
  input: "save/RestoreV2_67/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "mcnn/small/conv2_5x5/weights/Adam_1"
  input: "save/RestoreV2_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv2_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_68/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_68/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_68"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_68/tensor_names"
  input: "save/RestoreV2_68/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases"
  input: "save/RestoreV2_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_69/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_69/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_69"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_69/tensor_names"
  input: "save/RestoreV2_69/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases/Adam"
  input: "save/RestoreV2_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_70/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_70/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_70"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_70/tensor_names"
  input: "save/RestoreV2_70/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/biases/Adam_1"
  input: "save/RestoreV2_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_71/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_71/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_71"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_71/tensor_names"
  input: "save/RestoreV2_71/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights"
  input: "save/RestoreV2_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_72/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_72/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_72"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_72/tensor_names"
  input: "save/RestoreV2_72/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights/Adam"
  input: "save/RestoreV2_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_73/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv3_5x5/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_73/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_73"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_73/tensor_names"
  input: "save/RestoreV2_73/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "mcnn/small/conv3_5x5/weights/Adam_1"
  input: "save/RestoreV2_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv3_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_74/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_74/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_74"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_74/tensor_names"
  input: "save/RestoreV2_74/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases"
  input: "save/RestoreV2_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_75/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_75/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_75"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_75/tensor_names"
  input: "save/RestoreV2_75/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases/Adam"
  input: "save/RestoreV2_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_76/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_76/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_76"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_76/tensor_names"
  input: "save/RestoreV2_76/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/biases/Adam_1"
  input: "save/RestoreV2_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_77/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_77/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_77"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_77/tensor_names"
  input: "save/RestoreV2_77/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights"
  input: "save/RestoreV2_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_78/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_78/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_78"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_78/tensor_names"
  input: "save/RestoreV2_78/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights/Adam"
  input: "save/RestoreV2_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_79/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mcnn/small/conv4_5x5/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_79/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_79"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_79/tensor_names"
  input: "save/RestoreV2_79/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "mcnn/small/conv4_5x5/weights/Adam_1"
  input: "save/RestoreV2_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mcnn/small/conv4_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
}
node {
  name: "init"
  op: "NoOp"
  input: "^mcnn/large/conv_1_9x9/weights/Assign"
  input: "^mcnn/large/conv_1_9x9/biases/Assign"
  input: "^mcnn/large/conv2_9x9/weights/Assign"
  input: "^mcnn/large/conv2_9x9/biases/Assign"
  input: "^mcnn/large/conv3_9x9/weights/Assign"
  input: "^mcnn/large/conv3_9x9/biases/Assign"
  input: "^mcnn/large/conv4_9x9/weights/Assign"
  input: "^mcnn/large/conv4_9x9/biases/Assign"
  input: "^mcnn/medium/conv1_7x7/weights/Assign"
  input: "^mcnn/medium/conv1_7x7/biases/Assign"
  input: "^mcnn/medium/conv2_7x7/weights/Assign"
  input: "^mcnn/medium/conv2_7x7/biases/Assign"
  input: "^mcnn/medium/conv3_7x7/weights/Assign"
  input: "^mcnn/medium/conv3_7x7/biases/Assign"
  input: "^mcnn/medium/conv4_7x7/weights/Assign"
  input: "^mcnn/medium/conv4_7x7/biases/Assign"
  input: "^mcnn/small/conv1_5x5/weights/Assign"
  input: "^mcnn/small/conv1_5x5/biases/Assign"
  input: "^mcnn/small/conv2_5x5/weights/Assign"
  input: "^mcnn/small/conv2_5x5/biases/Assign"
  input: "^mcnn/small/conv3_5x5/weights/Assign"
  input: "^mcnn/small/conv3_5x5/biases/Assign"
  input: "^mcnn/small/conv4_5x5/weights/Assign"
  input: "^mcnn/small/conv4_5x5/biases/Assign"
  input: "^mcnn/dmp_conv1/weights/Assign"
  input: "^mcnn/dmp_conv1/biases/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^mcnn/large/conv_1_9x9/weights/Adam/Assign"
  input: "^mcnn/large/conv_1_9x9/weights/Adam_1/Assign"
  input: "^mcnn/large/conv_1_9x9/biases/Adam/Assign"
  input: "^mcnn/large/conv_1_9x9/biases/Adam_1/Assign"
  input: "^mcnn/large/conv2_9x9/weights/Adam/Assign"
  input: "^mcnn/large/conv2_9x9/weights/Adam_1/Assign"
  input: "^mcnn/large/conv2_9x9/biases/Adam/Assign"
  input: "^mcnn/large/conv2_9x9/biases/Adam_1/Assign"
  input: "^mcnn/large/conv3_9x9/weights/Adam/Assign"
  input: "^mcnn/large/conv3_9x9/weights/Adam_1/Assign"
  input: "^mcnn/large/conv3_9x9/biases/Adam/Assign"
  input: "^mcnn/large/conv3_9x9/biases/Adam_1/Assign"
  input: "^mcnn/large/conv4_9x9/weights/Adam/Assign"
  input: "^mcnn/large/conv4_9x9/weights/Adam_1/Assign"
  input: "^mcnn/large/conv4_9x9/biases/Adam/Assign"
  input: "^mcnn/large/conv4_9x9/biases/Adam_1/Assign"
  input: "^mcnn/medium/conv1_7x7/weights/Adam/Assign"
  input: "^mcnn/medium/conv1_7x7/weights/Adam_1/Assign"
  input: "^mcnn/medium/conv1_7x7/biases/Adam/Assign"
  input: "^mcnn/medium/conv1_7x7/biases/Adam_1/Assign"
  input: "^mcnn/medium/conv2_7x7/weights/Adam/Assign"
  input: "^mcnn/medium/conv2_7x7/weights/Adam_1/Assign"
  input: "^mcnn/medium/conv2_7x7/biases/Adam/Assign"
  input: "^mcnn/medium/conv2_7x7/biases/Adam_1/Assign"
  input: "^mcnn/medium/conv3_7x7/weights/Adam/Assign"
  input: "^mcnn/medium/conv3_7x7/weights/Adam_1/Assign"
  input: "^mcnn/medium/conv3_7x7/biases/Adam/Assign"
  input: "^mcnn/medium/conv3_7x7/biases/Adam_1/Assign"
  input: "^mcnn/medium/conv4_7x7/weights/Adam/Assign"
  input: "^mcnn/medium/conv4_7x7/weights/Adam_1/Assign"
  input: "^mcnn/medium/conv4_7x7/biases/Adam/Assign"
  input: "^mcnn/medium/conv4_7x7/biases/Adam_1/Assign"
  input: "^mcnn/small/conv1_5x5/weights/Adam/Assign"
  input: "^mcnn/small/conv1_5x5/weights/Adam_1/Assign"
  input: "^mcnn/small/conv1_5x5/biases/Adam/Assign"
  input: "^mcnn/small/conv1_5x5/biases/Adam_1/Assign"
  input: "^mcnn/small/conv2_5x5/weights/Adam/Assign"
  input: "^mcnn/small/conv2_5x5/weights/Adam_1/Assign"
  input: "^mcnn/small/conv2_5x5/biases/Adam/Assign"
  input: "^mcnn/small/conv2_5x5/biases/Adam_1/Assign"
  input: "^mcnn/small/conv3_5x5/weights/Adam/Assign"
  input: "^mcnn/small/conv3_5x5/weights/Adam_1/Assign"
  input: "^mcnn/small/conv3_5x5/biases/Adam/Assign"
  input: "^mcnn/small/conv3_5x5/biases/Adam_1/Assign"
  input: "^mcnn/small/conv4_5x5/weights/Adam/Assign"
  input: "^mcnn/small/conv4_5x5/weights/Adam_1/Assign"
  input: "^mcnn/small/conv4_5x5/biases/Adam/Assign"
  input: "^mcnn/small/conv4_5x5/biases/Adam_1/Assign"
  input: "^mcnn/dmp_conv1/weights/Adam/Assign"
  input: "^mcnn/dmp_conv1/weights/Adam_1/Assign"
  input: "^mcnn/dmp_conv1/biases/Adam/Assign"
  input: "^mcnn/dmp_conv1/biases/Adam_1/Assign"
}
versions {
  producer: 24
}
